openapi: 3.0.3
servers: 
  - url: 'http://booksapi.com'
info:
  version: 1.0.0
  title: BooksAPI
  termsOfService: 'https://booksapi.com/terms/'
  contact:
    email: contact@booksapi.com
    url: 'http://booksapi.com/contact'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://apis.guru/openapi-template/logo.png'
  description: >
    # Your description here
externalDocs:
  description: Find out how to create a GitHub repo for your OpenAPI definition.
  url: 'https://github.com/Rebilly/generator-openapi-repo'
paths:
  /books:
    post:
      tags:
        - Book
      summary: Post a book
      description: |
        Post a book. Some description of the operation.
        You can use `markdown` here.
      operationId: postBook
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object 
                required:
                  - title
                  - author
                  - chapters
                properties:
                  title:
                    type: string
                  author:
                    type: string
                  chapters:
                    type: array
                    items:
                      $ref: '#/components/schemas/Chapter'
      responses:
        '200':
          description: Successfully created a new book

        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
  /books/{bookId}:
    parameters:
      - name: bookId
        description: The unique identifier of the Book,
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ObjectId'
    get:
      tags:
        - Book
      summary: Retreieve a book by id
      description: |
          Get a book by id. Some description of the operation.
          You can use `markdown` here.
      operationId: getBookById
      responses:
        '200':
          description: The book corresponding to the provided `bookId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        404:
          description: No book found for the provided `bookId`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /books/{bookId}/update:
    parameters:
      - name: bookId
        description: The unique identifier of the Book,
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ObjectId'
    post:
      tags:
        - Book
      summary: Update a book
      description: |
        Update a book. Some description of the operation.
        You can use `markdown` here.
      operationId: updateBook
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object 
                required:
                  - title
                  - author
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  author:
                    type: string
                  front:
                    $ref: '#/components/schemas/PageGroup'
                  back:
                    $ref: '#/components/schemas/PageGroup'
                  chapters:
                    type: array
                    items:
                      $ref: '#/components/schemas/Chapter'
      responses:
        '200':
          description: Successfully created a new book

        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
  /books/{bookId}/chapters:
    parameters:
      - name: bookId
        description: The unique identifier of the Book,
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ObjectId'
    post:
      tags:
        - Book
      summary: Update chapters
      description: |
        Update a chaptrs in book. Some description of the operation.
        You can use `markdown` here.
      operationId: updateChapters
      requestBody:
        required: true
        content:
            application/json:
              schema:
                type: object 
                required:
                  - chapters
                properties:
                  chapters:
                    type: array
                    items:
                      $ref: '#/components/schemas/Chapter'
      responses:
        '200':
          description: Successfully created a new book

        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:   
                  message:
                    type: string
components:
  schemas:
    ObjectId:
      description: The unique identifier of an Object
      type: integer
    Book:
      type: object
      required:
        - id
        - title
        - author
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        title:
          type: string
        author:
          type: string
        front:
          $ref: '#/components/schemas/PageGroup'
        back:
          $ref: '#/components/schemas/PageGroup'
        chapters:
          type: array
          items:
            $ref: '#/components/schemas/Chapter'
    Chapter:
      type: object
      required:
        - id
        - title
        - content
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        title:
          type: string
        content:
          $ref: '#/components/schemas/PageGroup'
    PageGroup:
      description: List of Pages
      type: object
      required:
        - id
        - title
        - content
      properties:
        id:
          $ref: '#/components/schemas/ObjectId'
        content:
          type: array
          items:
            $ref: '#/components/schemas/Page'
    Page:
      description: List of ContentBlock
      type: array
      items:
        $ref: '#/components/schemas/ContentBlock'
    ContentBlock:
      description: List of ContentBlock
      type: string
    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable error message
          type: string
  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: X-Api-Key
security:
  - ApiKey: []
